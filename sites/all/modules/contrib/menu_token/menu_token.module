<?php

/**
 * @file
 * Menu Token module.
 */


module_load_include('inc', 'menu_token', 'includes/menu_token');
module_load_include('inc', 'menu_token', 'includes/menu_token.admin');


/**
 * Implementation of hook_theme().
 */
function menu_token_theme() {
  return array(
    'menu_token_uses_tokens' => array(),
  );
}


/**
 * Appends the "uses tokens" label to links on the admin menu links overview
 * form.
 */
function theme_menu_token_uses_tokens() {
  drupal_add_css(drupal_get_path('module', 'menu_token') . '/menu_token.css');
  return ' <span class="uses-tokens">' . t('uses tokens') . '</span>';
}


/**
 * Implements hook_ctools_plugin_type().
 */
function menu_token_ctools_plugin_type() {
  return array(
    'plugins' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}


/**
 * Implements hook_menu_token_plugins().
 */
function menu_token_menu_token_plugins() {
  if (module_exists('node')) {
    $plugins['node_context'] = array(
      'type' => 'node',
      'label' => t('Node from context'),
      'description' => t('Picks a node from the current context.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_node_context.inc',
        'class' => 'menu_token_node_context',
      ),
    );

    $plugins['node_random'] = array(
      'type' => 'node',
      'label' => t('Random node'),
      'description' => t('Picks a random node from the database.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_node_random.inc',
        'class' => 'menu_token_node_random',
      ),
    );

    $plugins['node_user_defined'] = array(
      'type' => 'node',
      'label' => t('User-defined node'),
      'description' => t('Uses a user-defined node id to retrieve the node object.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_node_user_defined.inc',
        'class' => 'menu_token_node_user_defined',
      ),
    );
  }

  if (module_exists('user')) {
    $plugins['user_context'] = array(
      'type' => 'user',
      'label' => t('User from context'),
      'description' => t('Picks a user from the current context.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_user_context.inc',
        'class' => 'menu_token_user_context',
      ),
    );

    $plugins['user_random'] = array(
      'type' => 'user',
      'label' => t('Random user'),
      'description' => t('Picks a random user from the database.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_user_random.inc',
        'class' => 'menu_token_user_random',
      ),
    );

    $plugins['user_user_defined'] = array(
      'type' => 'user',
      'label' => t('User-defined user'),
      'description' => t('Uses a user-defined user name to retrieve the user object.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_user_user_defined.inc',
        'class' => 'menu_token_user_user_defined',
      ),
    );
  }
  
  if (module_exists('taxonomy')) {
    $plugins['term_context'] = array(
      'type' => 'term',
      'label' => t('Taxonomy term from context'),
      'description' => t('Picks a taxonomy term from the current context.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_term_context.inc',
        'class' => 'menu_token_term_context',
      ),
    );

    $plugins['term_random'] = array(
      'type' => 'term',
      'label' => t('Random taxonomy term'),
      'description' => t('Picks a random taxonomy term from the one of the defined vocabularies.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_term_random.inc',
        'class' => 'menu_token_term_random',
      ),
    );

    $plugins['term_user_defined'] = array(
      'type' => 'term',
      'label' => t('User-defined taxonomy term'),
      'description' => t('Uses a user-defined term to retrieve the taxonomy term object.'),
      'handler' => array(
        'path' => drupal_get_path('module', 'menu_token') . '/plugins',
        'file' => 'menu_token_term_user_defined.inc',
        'class' => 'menu_token_term_user_defined',
      ),
    );
  }

  return $plugins;
}


/**
 * Implements of hook_translated_menu_link().
 */
function menu_token_translated_menu_link_alter(&$item, $map) {
  global $menu_admin;
  
  // Check whether we should replace the path.
  if (empty($menu_admin) && isset($item['options']['menu_token_link_path'])) {
    $info = token_get_info();
    $data = array();
    
    if (isset($item['options']['menu_token_data'])) {
      foreach ($item['options']['menu_token_data'] as $type => $options) {
        if (!empty($info['types'][$type]) && $handler = menu_token_get_handler($options['plugin'])) {
          if ($object = $handler->object_load($options['options'])) {
            $data[$type] = $object;
          }
        }
      }
    }

    // If item is generated by admin menu module, tokens should not be replaced and
    // indicator that tokens are used should be shown.
    $item['title'] =  token_replace($item['title'], $data);
    $item['link_path'] = token_replace($item['options']['menu_token_link_path'], $data);
    $item['href'] = $item['link_path'];

    // Override active trail if showing front page but translated link is not to front page.
    // NOTE: This relies on any parent of a tokenised menu item having "option" flag "alter" set,
    // which is most easily achieved by setting it to use token translation but not specifying a token.
    // Otherwise parent does not get processed through this function and because its untranslated child has
    // an href of <front>, the menu system thinks it is part of the active trail to the front page.
    if (drupal_is_front_page() && $item['href'] != drupal_get_normal_path(variable_get('site_frontpage', 'node'))) {
      $item['in_active_trail'] = FALSE;
    }

    // Check whether path is external.
    if (url_is_external($item['link_path'])) {
      return;
    }

    // Load menu_item and check access.
    if ($menu_item = menu_get_item($item['link_path'])) {
      $item['access'] = $menu_item['access'];
      return;
    }

    $item['access'] = FALSE;
  }
}


/**
 * Implements hook_menu_link_alter().
 */
function menu_token_menu_link_alter(&$item) {
  if (isset($item['options']['menu_token_link_path'])) {
    // Set 'alter' option to use hook_translated_menu_link().
    $item['options']['alter'] = TRUE;
  }
}
